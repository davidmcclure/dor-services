#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'stomp'
require 'timeout'
require 'dor-services'

options = { :log_level => Logger::DEBUG }

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options]"

  options[:dor_config] = nil
  opts.on( '--dor-config PATH', 'Load the dor-services configuration file at this path' ) do |path|
    puts "Configuring dor-services..."
    options[:dor_config] = path
    require options[:dor_config]
  end

  options[:destination] = '/topic/fedora.apim.update'
  opts.on('-d','--destination TOPIC', 'Topic to listen to') do |destination|
    options[:destination] = destination
  end
  options[:log_name]='dor_indexer'
  opts.on('--log_name') do |filename|
  options[:log_name]=filename
  end

  options[:client_id] = "fedora_stomper"
  opts.on('-c', '--client-id ID', 'Stomp client ID') do |client_id|
    Dor::Config.stomp.client_id = client_id
  end
  
  opts.on('-v', 'Verbose') do
    options[:log_level] -= 1 if options[:log_level] > 0
  end
  
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

begin; require 'rubygems'; rescue; end

unless options[:dor_config]
  $stderr.puts "The --dor-config PATH option is mandatory. Please provide the path to a valid dor-services configuration file."
  exit 1
end
logger = Logger.new("STDOUT)
puts "loading listener"
begin
  @clientid = options[:client_id]
  @destination = options[:destination]
  logger.level = ActiveFedora.logger.level = options[:log_level]
  
  @conn = Dor::Config.stomp.connection
  logger.warn "Getting output from #{@destination}\n"
  
  @conn.subscribe(@destination, {"activemq.subscriptionName" => @clientid, :ack =>"client" })
  while true  
      begin
      @msg = nil
        begin
        Timeout::timeout(300) do
        	@msg = @conn.receive
        end
        rescue Timeout::Error
   	      logger.warn "Sending heartbeat"
        	@conn.begin('heartbeat')
        	@conn.commit('heartbeat')
        end
        pid = @msg.headers["pid"]
        method = @msg.headers["methodName"]

        if ["addDatastream", "addRelationship","ingest","modifyDatastreamByValue","modifyDatastreamByReference","modifyObject","purgeDatastream","purgeRelationship","reindex"].include? method
          begin
            obj = Dor.load_instance pid
            Dor::SearchService.solr.add(obj.to_solr, :add_attributes => {:commitWithin => 10}) unless obj.nil?
          rescue
          end
        elsif method == "purgeObject"
          Dor::SearchService.solr.delete_by_id(pid)
        else
        	logger.warn "Unknown Method: #{method} for PID #{pid}"
        end
      		logger.info "updated solr index for #{pid}\n"
        @conn.ack @msg.headers["message-id"]
      
      rescue Exception => e
        #Dor.logger.warn "failed to update solr index for #{pid}: #<#{e.class.name}: #{e.message}>"
        logger.warn e.inspect
        logger.warn e.backtrace
      end
  end
  @conn.join

rescue Exception => e
p e
end

